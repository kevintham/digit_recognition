output$plot= renderPlot({
plot(x=vals$x, y=vals$y, xlim=c(0, 28), ylim=c(0, 28), ylab="y", xlab="x", type="l", lwd=input$mywidth)
})}
shinyApp(ui, server)
?actionButton
install.packages('shinyjs')
install.packages('imager')
?sliderInpu
?sliderInput
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?includeScript
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?p
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?sliderInput
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?p
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?sliderInput
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?input
?HTML
?tags$input
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
div(class="range-slider",
tags$input(type="range", min="1", max="10"))
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
sliderInput("slider", "Width:", min=1, max=20, value=10)
runApp('work/ds_portfolio/mnist_app')
install.packages('h2o')
shiny::runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
library(h2o)
h2o.init(nthreads=3)
train_file <- "https://h2o-public-test-data.s3.amazonaws.com/bigdata/laptop/mnist/train.csv.gz"
test_file <- "https://h2o-public-test-data.s3.amazonaws.com/bigdata/laptop/mnist/test.csv.gz"
train <- h2o.importFile(train_file)
head(train)
class(train)
normaltrain <- as.array(train)
normaltrain <- as.data.frame(train)
dim(train)
class(normaltrain)
head(names(train))
test <- h2o.importFile(test_file)
dim(test)
y <- "C785"  #response column: digits 0-9
x <- setdiff(names(train), y)  #vector of predictor column names
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
dl_fit2 <- h2o.deeplearning(x = x,
y = y,
training_frame = train,
model_id = "dl_fit2",
epochs = 50,
hidden = c(20,20),
stopping_rounds = 0,  # disable early stopping
seed = 1)
head((train))
runApp('work/ds_portfolio/mnist_app')
dim(train)
head(train[,785])
?h2o.deeplearning
names(train[,1:784]) <- as.character(1:784)
tail(names(train))
head(train)
names(train[,1:784]) <- as.character(c(1:784))
head(train)
names(train)
names(train) <- as.character(1:785)
head(train)
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, tidyr, neuralnet, caret, plyr, h2o)
h2o.init(nthreads = 3)
setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
train_file <- "train.csv.gz"
test_file <- "test.csv.gz"
train <- h2o.importFile(train_file)
?h2o.importFile
train_file <- "/home/kevintham/work/ds_portfolio/mnist_app/www/train.csv.gz"
test_file <- "/home/kevintham/work/ds_portfolio/mnist_app/www/test.csv.gz"
train <- h2o.importFile(train_file)
test <- h2o.importFile(test_file)
names(train) <- as.character(1:785)
names(test) <- as.character(1:785)
y <- "785"
x <- setdiff(names(train), y)
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
a <- matrix (rnorm(100), c(10,10))
sa <- stack(as.data.frame(a))
head(sa)
a <- matrix (rnorm(100), c(2,2))
sa <- stack(as.data.frame(a))
a
?matrix
dim(a)
a <- matrix (rnorm(100), c(10,10))
sa <- stack(as.data.frame(a))
dim(a)
a <- matrix (rnorm(4), c(2,2))
sa <- stack(as.data.frame(a))
a
sa
sa$x <- rep(seq_len(nrow(a)), ncol(a))
sa
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
a <- c(1:4)
a
matrix(a,c(2,2))
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
a
mat <- matrix(1:9,c(3,3))
mat
melt(mat)
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
?array
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
?imshow
??imshow
?plot.matrix
??plot.matrix
install.packages('sna')
library(sna)
plot.matrix(rgraph5)
?plot.sociomatrix
?plot.matrix
?myImagePlot
?image2D
??image2D
install.packages('plot3D')
?image2D
library(plot3D)
?image2D
a
mat
image2D(mat)
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
install.packages('RColorBrewer')
install.packages('RcolorBrewer')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
?brewer.pal
runApp('~/work/ds_portfolio/mnist_app')
?seq
seq(1,2,5)
seq(0,1,5)
seq(0,1,28)
seq(0,1,length.out=28)
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, tidyr, neuralnet, caret, plyr, h2o)
h2o.init(nthreads = 3)
setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
train_file <- "/home/kevintham/work/ds_portfolio/mnist_app/www/train.csv.gz"
test_file <- "/home/kevintham/work/ds_portfolio/mnist_app/www/test.csv.gz"
train <- h2o.importFile(train_file)
test <- h2o.importFile(test_file)
names(train) <- as.character(1:785)
names(test) <- as.character(1:785)
y <- "785"
x <- setdiff(names(train), y)
# Since the response is encoded as integers, we need to tell H2O that
# the response is in fact a categorical/factor column.  Otherwise, it
# will train a regression model instead of multiclass classification.
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
preproc <- preProcess(train[,-785], method=c('center'))
preproc <- preProcess(as.data.frame(train[,-785]), method=c('center'))
preproc <- preProcess(as.data.frame(train[,-785]), method=c('center'))
?colMeans
?colMeans
runApp('~/work/ds_portfolio/mnist_app')
head(train)
train[,-y] <- train[,-y]/255
train[,1:784] <- train[,1:784]/255
head(train)
?h2o.deeplearning
sqrt(128)
sqrt(144)
15*15
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, tidyr, neuralnet, caret, plyr, h2o)
h2o.init(nthreads = 3)
setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
train_file <- "/home/kevintham/work/ds_portfolio/mnist_app/www/train.csv.gz"
test_file <- "/home/kevintham/work/ds_portfolio/mnist_app/www/test.csv.gz"
train <- h2o.importFile(train_file)
test <- h2o.importFile(test_file)
names(train) <- as.character(1:785)
names(test) <- as.character(1:785)
y <- "785"
x <- setdiff(names(train), y)
# Since the response is encoded as integers, we need to tell H2O that
# the response is in fact a categorical/factor column.  Otherwise, it
# will train a regression model instead of multiclass classification.
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
train[,1:784] <- train[,1:784]/255
test[,1:784] <- test[,1:784]/255
hidden <- c(128,64,128)
ae_model <- h2o.deeplearning(x=x,
training_frame=train,
model_id="autoencoder",
ignore_const_cols=FALSE,
activation="Tanh",
hidden=hidden,
autoencoder=TRUE)
data(iris)
as.h2o(iris)
dat <- as.h2o(iris)
class(dat)
class(train)
saveRDS(ae_model, file='autoencode.RDS')
runApp('~/work/ds_portfolio/mnist_app')
nn_model <- h2o.deeplearning(x=x,
y=y,
training_frame=train,
model_id="nn_mode",
hidden=c(200, 200),
seed=1)
nn_model <- h2o.deeplearning(x=x,
y=y,
training_frame=train,
ignore_const_cols=FALSE,
model_id="nn_mode",
hidden=c(200, 200),
seed=1,
pretrained_autoencoder="autoencoder")
nn_model <- h2o.deeplearning(x=x,
y=y,
training_frame=train,
ignore_const_cols=FALSE,
model_id="nn_mode",
hidden=hidden,
seed=1,
pretrained_autoencoder="autoencoder")
c(2)
h2o.mse(nn_model)
h2o.confusionMatrix(nn_model)
saveRDS(nn_model, file='h2omodel.RDS')
?h2o.confusionMatrix
h2o.confusionMatrix(nn_model,test)
h2o.mse(nn_model,test)
class(predict(nn_model,test))
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
?h2o.deepfeatures
runApp('~/work/ds_portfolio/mnist_app')
?colkey
image2D(z = volcano)
image2D(z = volcano, colkey = FALSE)
image2D(volcano, xlab = "", clab = "m",
colkey = list(side = 1, length = 0.5, width = 0.5,
line.clab = 1))
colkey(side = 3, clim = range(volcano), add = TRUE)
?image2D
?colorRampPalette
?diff
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
?withProgress
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
nn_model
h2o.confusionMatrix(nn_model,test)
1-0.0252
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
?actionButton
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
?sidebarLayout
?sidebarPanel
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
sidebarPanel()
actionButton()
actionButton('t','t')
?sidebarPanel
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
rsconnect::showLogs()
runApp('~/work/ds_portfolio/mnist_app')
rm(list=ls())
runApp('~/work/ds_portfolio/mnist_app')
?h2o.init()
runApp('~/work/ds_portfolio/mnist_app')
??h2o
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
getwd()
setwd("/home/kevintham/work/ds_portfolio/mnist_app/")
model <- readRDS('www/h2omodel.RDS')
model
test <- h2o.importFile(test_file)
test_file <- "https://h2o-public-test-data.s3.amazonaws.com/bigdata/laptop/mnist/test.csv.gz"
test <- h2o.importFile(test_file)
h2o.confusionMatrix(model, test)
names(test) <- as.character(1:785)
y <- "785"
x <- setdiff(names(train), y)
test[,y] <- as.factor(test[,y])
test[,1:784] <- test[,1:784]/255
h2o.confusionMatrix(model, test)
runApp()
getwd()
setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
autoencoder <- readRDS('autoencode.RDS')
model <- readRDS('h2omodel.RDS')
h2o.saveModel(model, getwd())
?h2o.loadModel
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
?h2o.loadModel
getwd()
h2o.loadModel('nn_mode')
h2o.loadModel('nn_mode/model')
runApp('~/work/ds_portfolio/mnist_app')
?h2o.deeplearning
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, tidyr, neuralnet, caret, plyr, h2o)
h2o.init(nthreads = 3)
# Set relevant working directory
#setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
train_file <- "https://h2o-public-test-data.s3.amazonaws.com/bigdata/laptop/mnist/train.csv.gz"
test_file <- "https://h2o-public-test-data.s3.amazonaws.com/bigdata/laptop/mnist/test.csv.gz"
train <- h2o.importFile(train_file)
test <- h2o.importFile(test_file)
# Rename columns for ease
names(train) <- as.character(1:785)
names(test) <- as.character(1:785)
y <- "785"
x <- setdiff(names(train), y)
# Recode target as factor
train[,y] <- as.factor(train[,y])
test[,y] <- as.factor(test[,y])
# Rescale data
train[,1:784] <- train[,1:784]/255
test[,1:784] <- test[,1:784]/255
# Architecture of Network
hidden <- c(128,64,128)
# Train Autoencoder
ae_model <- h2o.deeplearning(x=x,
training_frame=train,
model_id="autoencoder",
ignore_const_cols=FALSE,
activation="Tanh",
hidden=hidden,
autoencoder=TRUE)
# save file
h2o.saveModel(ae_model, file=getwd())
# Train network with pretrained autoencoder
nn_model <- h2o.deeplearning(x=x,
y=y,
training_frame=train,
ignore_const_cols=FALSE,
model_id="nn_model",
hidden=hidden,
seed=1,
pretrained_autoencoder="autoencoder")
# save model
h2o.saveModel(nn_model, file=getwd())
?h2o.saveModel
h2o.saveModel(ae_model, path=getwd())
h2o.saveModel(nn_model, file=getwd())
h2o.saveModel(nn_model, path=getwd())
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
h2o.shutdown()
runApp('~/work/ds_portfolio/mnist_app')
h2o.shutdown()
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
