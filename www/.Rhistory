head(meta1)
head(meta2)
head(foldtesty)
source('~/work/datasciencecoursera/WLE_pred/WLE_pred.R', echo=TRUE)
head(metadata)
?install.packages('H20.ensemble')
install.packages('H20.ensemble')
install.packages('h2o.ensemble')
install.packages('h2o.Ensemble')
install.packages("https://h2o-release.s3.amazonaws.com/h2o-ensemble/R/h2oEnsemble_0.2.1.tar.gz", repos = NULL)
install.packages('h2o')
install.packages("https://h2o-release.s3.amazonaws.com/h2o-ensemble/R/h2oEnsemble_0.2.1.tar.gz", repos = NULL)
install.packages('shiny')
library(shiny)
?selectInput
?sliderInput
data(mtcars)
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('treesbrush')
runApp('treesbrush')
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
library('miniUI')
install.packages('miniUI')
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
q
myFirstGadget()
library(shiny)
library(miniUI)
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
multiplyNumbers(c(1:10),c(11:20))
?brushOpts
runApp('treesbrush')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
install.packages('googleVis')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
print(M,"chart")
plot(M)
?fruits
data(Fruits)
head(Fruits)
G <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600,height=400))
plot(G)
head(Exports)
?gvisGeoChart
install.packages('plotly')
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
?gathe
?gather
head(gather(cases,'year','n',2:4))
data(cases)
data("EuStockMarkets")
head(EuStockMarkets)
head(time(EuStockMarkets))
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time=rep(time(EuStockMarkets),4))
head(stocks)
plot_ly(stocks,x=~time,y=~price,color=~index,type='scatter',mode='lines')
plot_ly(stocks,x=time,y=price,color=index,type='scatter',mode='lines')
plot_ly(mtcaars,x=wt,y=mpg,mode='markers')
plot_ly(mtcars,x=wt,y=mpg,mode='markers')
plot_ly(mtcars,x=~wt,y=mpg,mode='markers')
plot_ly(mtcars,x=~wt,y=~mpg,mode='markers')
library(shiny)
ui <- fluidPage(
h4("Click on plot to start drawing, click again to pause"),
sliderInput("mywidth", "width of the pencil", min=1, max=30, step=1, value=10),
actionButton("reset", "reset"),
plotOutput("plot", width = "500px", height = "500px",
hover=hoverOpts(id = "hover", delay = 100, delayType = "throttle", clip = TRUE, nullOutside = TRUE),
click="click"))
server <- function(input, output, session) {
vals = reactiveValues(x=NULL, y=NULL)
draw = reactiveVal(FALSE)
observeEvent(input$click, handlerExpr = {
temp <- draw(); draw(!temp)
if(!draw()) {
vals$x <- c(vals$x, NA)
vals$y <- c(vals$y, NA)
}})
observeEvent(input$reset, handlerExpr = {
vals$x <- NULL; vals$y <- NULL
})
observeEvent(input$hover, {
if (draw()) {
vals$x <- c(vals$x, input$hover$x)
vals$y <- c(vals$y, input$hover$y)
}})
output$plot= renderPlot({
plot(x=vals$x, y=vals$y, xlim=c(0, 28), ylim=c(0, 28), ylab="y", xlab="x", type="l", lwd=input$mywidth)
})}
shinyApp(ui, server)
?actionButton
install.packages('shinyjs')
install.packages('imager')
?sliderInpu
?sliderInput
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?includeScript
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?p
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?sliderInput
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?p
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?sliderInput
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
?input
?HTML
?tags$input
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
div(class="range-slider",
tags$input(type="range", min="1", max="10"))
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
sliderInput("slider", "Width:", min=1, max=20, value=10)
runApp('work/ds_portfolio/mnist_app')
array()
?array
shiny::runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
runApp('work/ds_portfolio/mnist_app')
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, tidyr, neuralnet, caret, nnet, plyr)
setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
df <- read.csv('mnist_train.csv')
set.seed(2)
sdf <- df %>% group_by(X5) %>% sample_n(500)
index <- createDataPartition(unlist(sdf[,1]), 1, p=0.8, list=FALSE)
train <- sdf[index,]
test <- sdf[-index,]
train[,-1] = train[,-1]/255
class(train)
head(as.array(train))
class(as.array(train))
as.array(train)
head(train)
class(simplify2array(train))
train <- sdf[index,]
test <- sdf[-index,]
train[,-1] = simplify2array(train[,-1]/255)
test[,-1] = simplify2arraytest[-1]/255
test[,-1] = simplify2array(test[-1]/255)
preproc <- preProcess(train[,-1], method=c('center'))
ytrain <- class.ind(as.factor(unlist(train[,1])))
xtrain <- predict(preproc, train[,-1])
ytest <- as.factor(unlist(test[,1]))
xtest <- predict(preproc, test[,-1])
nn <- nnet(xtrain, ytrain, size=10, softmax=TRUE, entropy=TRUE, MaxNWts=8000)
saveRDS(preproc, file='preproc.RDS')
saveRDS(nn, file='model.RDS')
res <- predict(nn, xtest)
pred.fac <- factor(apply(res, 1, which.max))
pred.fac <- revalue(pred.fac, c('1'='0','2'='1','3'='2','4'='3','5'='4','6'='5','7'='6','8'='7','9'='8','10'='9'))
caret::confusionMatrix(ytest, pred.fac)
runApp('~/work/ds_portfolio/mnist_app')
?sweep
runApp('~/work/ds_portfolio/mnist_app')
head(xtrain)
head(train)
train <- simplify2array(sdf[index,])
test <- simplify2array(sdf[-index,])
train[,-1] = train[,-1]/255
test[,-1] = test[-1]/255
head(train)
head(unname(train))
train <- unname(simplify2array(sdf[index,]))
test <- unname(simplify2array(sdf[-index,]))
train[,-1] = train[,-1]/255
test[,-1] = test[-1]/255
preproc <- preProcess(train[,-1], method=c('center'))
ytrain <- class.ind(as.factor(unlist(train[,1])))
xtrain <- predict(preproc, train[,-1])
ytest <- as.factor(unlist(test[,1]))
xtest <- predict(preproc, test[,-1])
test[,-1] = test[-1]/255
test[,-1] = test[,-1]/255
preproc <- preProcess(train[,-1], method=c('center'))
names(train[,-1]) <- 1:784
preproc <- preProcess(train[,-1], method=c('center'))
head(train[-1])
head(train[,-1])
names(train[,-1]) <- c(1:784)
preproc <- preProcess(train[,-1], method=c('center'))
names(train[,-1]) <- as.character(c(1:784))
preproc <- preProcess(train[,-1], method=c('center'))
head(train[,-1])
preproc <- preProcess(train[,-1], method=c('center'))
?preProcess
?matrix
train <- sdf[index,]
test <- sdf[-index,]
names(train[,-1]) <- as.character(c(1:784))
head(train)
train[,-1]
xtrain <- train[,-1]
names(xtrain) <- as.character(c(1:784))
head(xtrain)
train <- sdf[index,]
test <- sdf[-index,]
xtrain <- train[,-1]/255
xtest <- test[,-1]/255
names(xtrain) <- as.character(c(1:784))
names(xtest) <- as.character(c(1:784))
preproc <- preProcess(xtrain, method=c('center'))
ytrain <- class.ind(as.factor(unlist(train[,1])))
xtrain <- predict(preproc, xtrain)
ytest <- as.factor(unlist(test[,1]))
xtest <- predict(preproc, xtest)
nn <- nnet(xtrain, ytrain, size=10, softmax=TRUE, entropy=TRUE, MaxNWts=8000)
res <- predict(nn, xtest)
pred.fac <- factor(apply(res, 1, which.max))
pred.fac <- revalue(pred.fac, c('1'='0','2'='1','3'='2','4'='3','5'='4','6'='5','7'='6','8'='7','9'='8','10'='9'))
caret::confusionMatrix(ytest, pred.fac)
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
head(xtrain)
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
Q
runApp('~/work/ds_portfolio/mnist_app')
class(test_df)
print(class(test_df))
test_df
runApp('~/work/ds_portfolio/mnist_app')
ls()
runApp('~/work/ds_portfolio/mnist_app')
class(xtrain)
test_arr <- array(test_vec, dim=c(1,784))
test_df <- data.frame(test_arr)
test_arr <- array(1:784, dim=c(1,784))
test_df <- data.frame(test_arr)
head(test_df)
names(test_df) <- 1:784
x <- predict(preproc,test_df)
x
dim(x)
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
x <- predict(preproc,test_df)
runApp('~/work/ds_portfolio/mnist_app')
ytrain <- class.ind(as.factor(unlist(training[,1])))
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, tidyr, neuralnet, caret, nnet, plyr)
setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
df <- read.csv('mnist_train.csv')
set.seed(2)
sdf <- df %>% group_by(X5) %>% sample_n(500)
index <- createDataPartition(unlist(sdf[,1]), 1, p=0.8, list=FALSE)
training <- sdf[index,]
test <- sdf[-index,]
xtrain <- training[,-1]/255
xtest <- test[,-1]/255
names(xtrain) <- as.character(c(1:784))
names(xtest) <- as.character(c(1:784))
preproc <- preProcess(xtrain, method=c('center'))
ytrain <- class.ind(as.factor(unlist(training[,1])))
xtrain <- predict(preproc, xtrain)
ytest <- as.factor(unlist(test[,1]))
xtest <- predict(preproc, xtest)
#nn <- train(xtrain, ytrain, method="neuralnet",
#            tuneGrid=data.frame(layer1=1000,layer2=0,layer3=0))
#xtrain$y <- ytrain
n <- names(xtrain)
f <- as.formula(paste("y ~", paste(n[!n %in% "y"], collapse = " + ")))
nn <- nnet(xtrain, ytrain, size=10, softmax=TRUE, entropy=TRUE, MaxNWts=8000)
res <- predict(nn, xtest)
pred.fac <- factor(apply(res, 1, which.max))
pred.fac <- revalue(pred.fac, c('1'='0','2'='1','3'='2','4'='3','5'='4','6'='5','7'='6','8'='7','9'='8','10'='9'))
caret::confusionMatrix(ytest, pred.fac)
#res <- compute(nn, xtest)
saveRDS(preproc, file='preproc.RDS')
saveRDS(nn, file='model.RDS')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, tidyr, neuralnet, caret, nnet, plyr)
setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
df <- read.csv('mnist_train.csv')
set.seed(2)
sdf <- df %>% group_by(X5) %>% sample_n(500)
index <- createDataPartition(unlist(sdf[,1]), 1, p=0.8, list=FALSE)
training <- sdf[index,]
test <- sdf[-index,]
xtrain <- training[,-1]/255
xtest <- test[,-1]/255
names(xtrain) <- as.character(c(1:784))
names(xtest) <- as.character(c(1:784))
preproc <- preProcess(xtrain, method=c('center'))
ytrain <- class.ind(as.factor(unlist(training[,1])))
xtrain <- predict(preproc, xtrain)
ytest <- as.factor(unlist(test[,1]))
xtest <- predict(preproc, xtest)
#nn <- train(xtrain, ytrain, method="neuralnet",
#            tuneGrid=data.frame(layer1=1000,layer2=0,layer3=0))
#xtrain$y <- ytrain
n <- names(xtrain)
f <- as.formula(paste("y ~", paste(n[!n %in% "y"], collapse = " + ")))
nn <- nnet(xtrain, ytrain, size=30, softmax=TRUE, entropy=TRUE, MaxNWts=8000)
res <- predict(nn, xtest)
pred.fac <- factor(apply(res, 1, which.max))
pred.fac <- revalue(pred.fac, c('1'='0','2'='1','3'='2','4'='3','5'='4','6'='5','7'='6','8'='7','9'='8','10'='9'))
caret::confusionMatrix(ytest, pred.fac)
#res <- compute(nn, xtest)
saveRDS(preproc, file='preproc.RDS')
saveRDS(nn, file='model.RDS')
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, tidyr, neuralnet, caret, nnet, plyr)
setwd('/home/kevintham/work/ds_portfolio/mnist_app/www/')
df <- read.csv('mnist_train.csv')
set.seed(2)
sdf <- df %>% group_by(X5) %>% sample_n(500)
index <- createDataPartition(unlist(sdf[,1]), 1, p=0.8, list=FALSE)
training <- sdf[index,]
test <- sdf[-index,]
xtrain <- training[,-1]/255
xtest <- test[,-1]/255
names(xtrain) <- as.character(c(1:784))
names(xtest) <- as.character(c(1:784))
preproc <- preProcess(xtrain, method=c('center'))
ytrain <- class.ind(as.factor(unlist(training[,1])))
xtrain <- predict(preproc, xtrain)
ytest <- as.factor(unlist(test[,1]))
xtest <- predict(preproc, xtest)
#nn <- train(xtrain, ytrain, method="neuralnet",
#            tuneGrid=data.frame(layer1=1000,layer2=0,layer3=0))
#xtrain$y <- ytrain
n <- names(xtrain)
f <- as.formula(paste("y ~", paste(n[!n %in% "y"], collapse = " + ")))
nn <- nnet(xtrain, ytrain, size=30, softmax=TRUE, entropy=TRUE, MaxNWts=40000)
res <- predict(nn, xtest)
pred.fac <- factor(apply(res, 1, which.max))
pred.fac <- revalue(pred.fac, c('1'='0','2'='1','3'='2','4'='3','5'='4','6'='5','7'='6','8'='7','9'='8','10'='9'))
caret::confusionMatrix(ytest, pred.fac)
#res <- compute(nn, xtest)
saveRDS(preproc, file='preproc.RDS')
saveRDS(nn, file='model.RDS')
runApp('~/work/ds_portfolio/mnist_app')
nn <- nnet(xtrain, ytrain, size=50, softmax=TRUE, entropy=TRUE, MaxNWts=40000)
?nnet
dim(xtrain)
dim(ytrain)
dim(sdf)
1500*5
res <- predict(nn, xtest)
pred.fac <- factor(apply(res, 1, which.max))
pred.fac <- revalue(pred.fac, c('1'='0','2'='1','3'='2','4'='3','5'='4','6'='5','7'='6','8'='7','9'='8','10'='9'))
caret::confusionMatrix(ytest, pred.fac)
saveRDS(preproc, file='preproc.RDS')
saveRDS(nn, file='model.RDS')
sdf <- df %>% group_by(X5) %>% sample_n(1500)
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
runApp('~/work/ds_portfolio/mnist_app')
install.packages('h2o')
install.packages('h2o')
